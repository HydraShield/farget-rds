service: express-rds

plugins:
  - serverless-fargate

custom:
  rds:
    database: demoRDSMysql1
    user: ${env:DB_USER}
    password: ${env:DB_PASSWORD}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  ecr:
    images:
      rds-express:
        path: ./app-express/
        file: Dockerfile

fargate:
  clusterName: express-fargate-cluster
  containerInsights: true
  memory: '4 GB'
  cpu: 2048
  architecture: X86_64
  vpc:
    assignPublicIp: true
    securityGroupIds:
      - Fn::GetAtt: [SecurityGroup0, GroupId]
    subnetIds:
      - Fn::GetAtt: [Subnet1, SubnetId]
  tasks:
    rds-express-fargate-task:
      name: rds-express-fargate-task
      image: rds-express
      memory: '2 GB'
      cpu: 1024
      vpc:
        securityGroupIds:
          - Fn::GetAtt: sg-02f592e8908c5e3de
        subnetIds:
          - Fn::GetAtt: subnet-0144263fc47c9300e
        assignPublicIp: true
      service:
        desiredCount: 1
        maximumPercent: 200
      cloudFormationResource:
        container:
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080

resources:
  Resources:
    SecurityGroup1:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: My Security Group for RDS
        VpcId: vpc-0192d315eced25399
        SecurityGroupIngress:
          - CidrIp: 172.31.16.0/20
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306

    DemoRDSMySQL:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: ${self:custom.rds.database}
        MasterUsername: ${self:custom.rds.user}
        MasterUserPassword: ${self:custom.rds.password}
        Engine: MySQL
        AllocatedStorage: 5
        DBInstanceClass: db.t2.small
        PubliclyAccessible: false
        VPCSecurityGroups:
          - Fn::GetAtt: [SecurityGroup1, GroupId]
